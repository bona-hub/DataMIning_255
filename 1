import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy.linalg import eigh

# Define the adjacency matrix for the graph
adj_matrix = np.array([
    [0, 1, 1, 0, 0, 0],
    [1, 0, 1, 1, 0, 0],
    [1, 1, 0, 0, 1, 0],
    [0, 1, 0, 0, 1, 1],
    [0, 0, 1, 1, 0, 1],
    [0, 0, 0, 1, 1, 0]
])

# Step 1: Spectral Clustering
def spectral_clustering(adj_matrix, n_clusters=2):
    # Compute the degree matrix
    degree_matrix = np.diag(np.sum(adj_matrix, axis=1))
    
    # Compute the Laplacian matrix
    laplacian = degree_matrix - adj_matrix
    
    # Compute the eigenvalues and eigenvectors of the Laplacian
    eigenvalues, eigenvectors = eigh(laplacian)
    
    # Select the eigenvectors corresponding to the smallest non-zero eigenvalues
    # Exclude the first column (eigenvector for eigenvalue 0)
    features = eigenvectors[:, 1:n_clusters]
    
    # Apply K-means on the features
    kmeans = KMeans(n_clusters=n_clusters, random_state=0)
    labels = kmeans.fit_predict(features)
    return labels
# Step 2: K-Means Clustering
def kmeans_clustering(adj_matrix, n_clusters=2):
    # Apply K-means directly to the rows of the adjacency matrix
    kmeans = KMeans(n_clusters=n_clusters, random_state=0)
    labels = kmeans.fit_predict(adj_matrix)
    return labels
# Apply both clustering methods
spectral_labels = spectral_clustering(adj_matrix)
kmeans_labels = kmeans_clustering(adj_matrix)

# Step 3: Visualize the results using NetworkX
def visualize_clustering(adj_matrix, labels, title):
    G = nx.from_numpy_array(adj_matrix)
    pos = nx.spring_layout(G)  # Spring layout for visualization
    nx.draw(G, pos, with_labels=True, node_color=labels, cmap=plt.cm.Set1, node_size=500)
    plt.title(title)
    plt.show()

# Visualize spectral clustering results
visualize_clustering(adj_matrix, spectral_labels, "Spectral Clustering Results")

# Visualize K-means clustering results
visualize_clustering(adj_matrix, kmeans_labels, "K-means Clustering Results")

      
